name,ring,quadrant,moved,description
Lightweight Architecture Decision Records,adopt,techniques,down,"Much documentation can be replaced with highly readable code and tests. In a world of evolutionary architecture, however, it's important to record certain design decisions for the benefit of future team members as well as for external oversight. Lightweight Architecture Decision Records is a technique for capturing important architectural decisions along with their context and consequences. We store these details in source control, instead of a wiki or website, as then they can provide a record that remains in sync with the code itself."
Pull Request Templates,adopt,techniques,down,"PR templates can pre-populate a pull request with a list of things to check before the PR is merged."
Domain-driven Design,trial,techniques,down,"Domain-driven Design (DDD) is a development approach that deeply values the domain model and connects it to the implementation. DDD gives us the opportunity to keep ourselves honest about striving for persistence ignorance by abstracting the consistency boundaries through proper domain modeling. We are finding it easy to shape the discussions around business language and structure the codebase around the well-established DDD concepts such as Aggregate, Command, Event, etc. There is also a great deal of resource and community support behind this approach which makes it easy to acquire the knowledge. Being explored by The Spiders."
Property-based testing,trial,techniques,none,"Property-based testing is a technique of writing tests in a manner where you express the property (characteristic) of the component. You don't provide particular values as an input, but usually, you let a sophisticated framework to generate a lot of test cases (usually limited to 100 by default) from all possible range of input and algorithm tries to find as fast as possible a fail case. Being explored by DataMasker team and we are using FsCheck to do it."
Isolated installer tests,adopt,techniques,down,"Automated tests that install in an isolated VM gives confidence that build is actually releasable. Ideally, both a clean install, and an upgrade install from the previous release, to ensure the installer works for both new and existing users."
C# 8,adopt,languages and frameworks,up,"We build our software using C#. We try to keep up to date with the latest version of C# possible as new language features help us write simpler code."
JavaScript (pre ES6),assess,languages and frameworks,down,"We don't use older versions of JavaScript. ES6 features like promises, modules and classes significantly improve the JavaScript experience, and tools like BabelJS allow us to adopt this with confidence. We will update older JavaScript implementations when possible, but will not actively retire them across our codebase."
JavaScript (ES6+),adopt,languages and frameworks,down,"We use JavaScript for rapid prototyping of ideas because it allows us to go faster. In code bases where we already have significant JavaScript we will continue to use modern JavaScript."
TypeScript,adopt,languages and frameworks,none,"TypeScript provides an advanced type system on top of JavaScript. We have a preference for TypeScript in production code because the optional type safety can help and improved tool support."
Git,adopt,tools,down,"Git is our defacto VCS, and all repositories are stored on GitHub."
Raygun error reporting,adopt,tools,down,"Raygun allows loosely-coupled error reporting to a web endpoint. Raygun offers other capabilities too, but we only use the error reporting. Ideally our choice of error provider would be a server-side decision, but RedGate.Usage.Client doesn't currently support error reporting"
SmartAssembly,hold,tools,down,"SmartAssembly obfuscation, error and usage reporting becomes tightly-coupled to products and slows down builds."
Fakes,trial,techniques,down,"We've experimented using <a href='https://github.com/testdouble/contributing-tests/wiki/Test-Double'>Fakes</a> in the Redgate Usage Client - fakes used in the test can reduce the amount of mocking is required and can make the tests simpler."
Wix 3,adopt,tools,down,"Windows Installer XML Toolset 3 (WiX), is a free software toolset that builds Windows Installer packages from XML. We only use Wix v3."
AppInsights,adopt,tools,down,"Microsoft's platform for data analysis."
SonarQube,adopt,tools,down,"Sonarqube provides automated code review, highlighting quality issues in changing code. This feedback is best surfaced through automated PR comments."
RedGate.Build,adopt,tools,down,"Redgate's standardised, scripted infrastructure for building products. Based on <a href='https://github.com/red-gate/build-script-template'>build-script-templates</a>."
Custom build scripts,assess,tools,down,"Builds scripts that diverge from RedGate.Build. These were useful when first made, but we should move to sandard RedGate.Build when possible."
Build magic,hold,tools,down,"Legacy build tooling, now to be deprecated in favour of RedGate.Build."
Vagrant,adopt,tools,down,"Vagrant is an open-source software product for building and maintaining portable virtual software development environments. We use Vagrant with Puppet to provision test environments and internal infrastructure."
Puppet,adopt,tools,down,"Puppet is an open-source software configuration management tool. We use Vagrant with Puppet to provision test environments and internal infrastructure."
DevCloud,adopt,tools,down,"DevCloud is an internal platform for hosting short-lived virtual machines."
Long-lived Virtual Machines,hold,tools,down,"We avoid using long-lived virtual machines, especially those that cannot be trivially rebuilt on demand."
Docker (for building products around),trial,tools,down,"Docker is a tool designed to make it easier to create, deploy, and run applications by using containers. Currently being explored by Whitesharks."
Docker (for distributing products),trial,tools,down,"Docker makes distributing and consuming products much easier for our customers, although it does raise some questions around licensing."
Docker (for build/test environments),trial,tools,down,"Containerizing build/test environments makes builds more consistent and reduces the dependency on specific build agent environments. Currently being explored by Team Orca."
Kubernetes,trial,tools,down,"Kubernetes is an open-source container-orchestration system for automating deployment, scaling and management of containerized applications. Currently being explored by Whitesharks."
Renovate,trial,tools,down,"<a href='https://renovatebot.com'>Renovate</a> is a tool for automatically updating third party dependencies (such as those from NuGet and npm). Using it enables continuous integration of a project's dependencies and reduces the time spent performing manual dependency updates. This is being explored by the Ambassadors, Spiders and Prompt teams."
Dependabot,trial,tools,up,"<a href='https://dependabot.com/'>Dependabot</a> is a tool for automatically updating third party dependencies (such as those from NuGet and npm), which has been acquired by Github and is being integrated with the platform. Using it enables continuous integration of a project's dependencies and reduces the time spent performing manual dependency updates. This is being explored with repositories that use supported package management tools, such as <a href='https://github.com/red-gate/honeycomb/'>honeycomb</a>."
CEF,assess,languages and frameworks,down,"Chromium Embedded framework (CEF) is an open-source framework for embedding a web browser engine inside other tools. This was explored, but proved unsuccessful for Redgate. It's only used in SQL Doc, but we have no plans to actively replace it."
Winforms,assess,languages and frameworks,down,"Winforms is a legacy UI library in the .NET Framework. Maybe Redgate products already use Winforms, but we prefer other tools for new development."
WPF,assess,languages and frameworks,up,"Windows Presentation Foundation (WPF) s a graphical subsystem provided with the .NET Framework. We use this for legacy reasons, but it is not recommended for new development."
Electron,adopt,languages and frameworks,down,"Electron is an open-source desktop UI framework. It's developed/maintained by GitHub, and used by Microsoft for VS Code. It is our prefered desktop UI technology."
Check for Updates (CfU),assess,tools,down,"Redgate's established mechanism for distributing product upgrades. The update process is manual and intrusive for users, leading to slow version uptake and version fragmentation in production. We're keen to explore alternatives."
SQL Change Automation,trial,tools,down,"Redgate SQL Change Automation is our commerical offering to help people manage the state of databases as part of application deployment. We should investigate if/how to use our own tools as part of our development activities. Versioning Teams to investigate this by looking at how CORE manage databases."
React,adopt,languages and frameworks,down,"React is our web framework of choice. It's popular, it's easy to understand and it's got great tooling support."
Honeycomb Web Toolkit,adopt,languages and frameworks,down,"Honeycomb is our design system and the web toolkit makes adopting this in your own projects easy."
Webpack,adopt,languages and frameworks,down,"Webpack is a module bundler. It's main purpose is to bundle JavaScript files for usage in a browser."
Babel,adopt,languages and frameworks,down,"Babel is a JavaScript compiler allowing you to confidently use the latest JavaScript features in all browsers."
"Octopus Deploy (internal deployments)",adopt,tools,down,"Octopus Deploy is used for deploying software within Redgate. Whenever we deploy something running on Redgate's infrastructure, it should be deployed through Octopus. This can be configured with ITOps."
".NET Core",adopt,languages and frameworks,up,"Microsoft has delivered a cross-platform future. New applications should be built with .NET Core by default whenever possible."
"SQL Server",adopt,platforms,up,"SQL Server is our default choice for storing relational data."
"Redgate Installer",adopt,tools,down,"Redgate Installer is our standard installer which we should use in preference to other installer technologies because it allows us to ship products together, provides a consistent experience, and integrates with our release, licensing and update systems."
"TeamCity",adopt,tools,down,"We build all of our projects on TeamCity because it's simpler to use one CI system across the company. Our use of build scripts rather than complex TeamCity configuration reduces coupling of our builds to TeamCity itself."
"Prettier",adopt,tools,down,"Prettier automates consistent code styling for web languages by providing as few formatting options as possible."
"Java",assess,languages and frameworks,down,"Typically we don't use Java, but we will when necessary. Examples include the SQL Change Automation plugins for TeamCity, Bamboo and Jenkins."
"PowerShell Core 6",adopt,languages and frameworks,down,"For internal automation we use PowerShell Core 6."
"PowerShell 3+","adopt",platforms,down,"When we are writing cmdlets for external use we target PowerShell 3."
"JSON",adopt,languages and frameworks,down,"For storing user information, such as settings we want to use a textual format. The choice boils down to JSON or XML. We prefer JSON because it's less verbose."
"XML",assess,tools,down,"For storing user information we used to use XML. We'll continue to use that, but avoid it in the future because it's very verbose. We perceive the cost of migration away to be high enough for this to be Endure, rather than Retire."
"Registry",assess,tools,down,"We avoid storing settings in the Registry as it's Windows specific. However, it does make it easier for system administrators to apply group policy so we should bear this in mind when choosing setting locations."
"Feature flags",adopt,techniques,down,"<a href='https://martinfowler.com/articles/feature-toggles.html'>A mechanism to prevent released code from affecting the way the product behaves</a>. There are lots of different types of flags/toggles: they might be set at compile or run time; they might be purely internal or visible to the user, and so on."
"Automated Code Style Settings",adopt,techniques,down,"Each team should automate their coding style using a team shared R# settings file."
"Chocolatey",adopt,tools,down,"<a href='https://chocolatey.org/'>Chocolatey</a> is a package manager for Windows. We use this internally to install tools such as Vagrant and Virtual Box and as part of our test infrastructure."
"OWASP Dependency-Check",trial,tools,down,"<a href='https://github.com/jeremylong/DependencyCheck'>Dependency-Check</a> is a Software Composition Analysis (SCA) tool that attempts to detect publicly disclosed vulnerabilities contained within a project's dependencies. Its value to Redgate is being explored by the coaches and the Toolbelt Team."
"Postman",trial,tools,down,"<a href='https://www.getpostman.com/'>Postman</a> is an API development environment. Currently being explored by the versioning teams."
"KeePass",adopt,tools,down,"<a href='https://keepass.info/'>KeePass</a> allows to store all passwords in one encrypted file in GitHub, so you need to care about one main password only, rather than multiple passwords to multiple resources."
"Semantic UI",trial,languages and frameworks,down,"<a href='https://react.semantic-ui.com/'>Semantic UI</a> is a library of web controls for modern web development, similar to Bootstrap, that has an official React library."
"honeycomb-semantic-ui-theme",trial,languages and frameworks,down,"An <a href='https://github.com/red-gate/honeycomb-semantic-ui-theme'>NPM package</a> to theme <a href='https://semantic-ui.com/'>Semantic UI</a> in the style of Honeycomb."
"Semantic Versioning",adopt,techniques,down,"<a href='https://semver.org/'>Semantic Versioning</a> is a de-facto industry standard for versioning applications. We should strive to use it, at least for internal libraries. For user-facing products SemVer may conflict with marketing needs."
"Four Key Metrics",adopt,techniques,up,"The <a href='https://devops-research.com/research.html'>State of DevOps reports</a>, and summary published in <a href='https://itrevolution.com/book/accelerate/'>Accelerate</a>, identifies a direct link between organizational performance and software delivery performance. This identified four key metrics that differentiate between low, medium and high performers: delivery lead time, deployment frequency, mean time to restore (MTTR) and change fail percentage. We have instrumented our build pipelines to track these metrics at Redgate, allowing us to drive performance improvements and see the impact of changes to how we work. The metrics are available internally at <a href='http://acceleratemetrics.red-gate.com'>acceleratemetrics.red-gate.com</a>."
Helm,adopt,tools,up,"'The package manager for Kubernetes'. An <a href='https://helm.sh/'>open-source project</a> to deploy and update kubernetes applications with multiple resources via Helm charts."
Grafana,adopt,tools,up,"'Grafana is the open-source analytics & monitoring solution for every database'. An open-source dashboarding project that can integrate with many data source, including Prometheus. See <a href='www.gafana.com'>Grafana</a>"
"Roslyn-based code analyzers",adopt,tools,up,"<a href='https://docs.microsoft.com/en-us/dotnet/standard/analyzers/'>The Roslyn-based Analyzers</a> analyze projects' source code to find issues and suggest corrections. They work both interactively and during builds. They're normally easy to introduce and give valueable feedback on the spot. Some analyzers that we adopted are <a href='https://security-code-scan.github.io/'>Security Code Scan</a>, Microsoft.VisualStudio.Threading.Analyzers, Microsoft.AspNetCore.Mvc.Api.Analyzers, Microsoft.DotNet.Analyzers.Compatibility, NSubstitute.Analyzers.CSharp, FluentAssertions.Analyzers."
"Common code style with nightly reformatting",adopt,techniques,up,"Consistent code style has multiple benefits. Reformatting the code nightly ensures that the formatting is applied without the need for any manual actions. We're using JetBrains CleanupCode for C# and Prettier for JS/TS. The formatting rules are stored in .editorconfig file."